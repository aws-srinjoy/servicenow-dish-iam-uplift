from aws_cdk import (
  core,
  aws_iam as iam
)

class NetworkAdminRoleExampleAdministratorStack(core.Stack):

  def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:
      super().__init__(scope, id, **kwargs)

      trusted_cidrs_parameter=core.CfnParameter(self,
        "TrustedCidrRanges",
        description="Trusted CIDR Ranges",
        type="CommaDelimitedList"
      )

      """
      max_session_duration_parameter=core.CfnParameter(self,
        "MaxSessionDuration",
        default=1,
        description="Maximum Session Duration for Assume Role - Hours",
        type=""
      )
      """

      iam_path_parameter=core.CfnParameter(self,
        "IAMPath",
        default="/",
        description="IAM Path" 
      ) 

      identity_provider_name_parameter=core.CfnParameter(self,
        "IdentityProviderName",
        description="Identity Provider SAML Name"
        #substituded in arn:aws:iam::123456789234:saml-provider/IdentityProviderName
      )

      trusted_cidrs=trusted_cidrs_parameter.value_as_list
      max_session_duration=1
      iam_path=iam_path_parameter.value_as_string
      identity_provider_name=identity_provider_name_parameter.value_as_string

      ec2_network_administrator_managed_policy=iam.ManagedPolicy(
        self,
        "EC2NetworkAdministratorManagedPolicy",
        managed_policy_name="EC2NetworkAdministrator",
        description="EC2 Network Administrator",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="EC2NetworkAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "ec2:AcceptVpcEndpointConnections",
                "ec2:AllocateAddress",
                "ec2:AssignIpv6Addresses",
                "ec2:AssignPrivateIpAddresses",
                "ec2:AssociateAddress",
                "ec2:AssociateDhcpOptions",
                "ec2:AssociateRouteTable",
                "ec2:AssociateSubnetCidrBlock",
                "ec2:AssociateVpcCidrBlock",
                "ec2:AttachInternetGateway",
                "ec2:AttachNetworkInterface",
                "ec2:AttachVpnGateway",
                "ec2:CreateCustomerGateway",
                "ec2:CreateDefaultSubnet",
                "ec2:CreateDefaultVpc",
                "ec2:CreateDhcpOptions",
                "ec2:CreateEgressOnlyInternetGateway",
                "ec2:CreateFlowLogs",
                "ec2:CreateInternetGateway",
                "ec2:CreateNatGateway",
                "ec2:CreateNetworkAcl",
                "ec2:CreateNetworkAclEntry",
                "ec2:CreateNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:CreatePlacementGroup",
                "ec2:CreateRoute",
                "ec2:CreateRouteTable",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSubnet",
                "ec2:CreateTags",
                "ec2:CreateVpc",
                "ec2:CreateVpcEndpoint",
                "ec2:CreateVpcEndpointConnectionNotification",
                "ec2:CreateVpcEndpointServiceConfiguration",
                "ec2:CreateVpnConnection",
                "ec2:CreateVpnConnectionRoute",
                "ec2:CreateVpnGateway",
                "ec2:DeleteEgressOnlyInternetGateway",
                "ec2:DeleteFlowLogs",
                "ec2:DeleteNatGateway",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteNetworkInterfacePermission",
                "ec2:DeletePlacementGroup",
                "ec2:DeleteSubnet",
                "ec2:DeleteTags",
                "ec2:DeleteVpc",
                "ec2:DeleteVpcEndpointConnectionNotifications",
                "ec2:DeleteVpcEndpoints",
                "ec2:DeleteVpcEndpointServiceConfigurations",
                "ec2:DeleteVpnConnection",
                "ec2:DeleteVpnConnectionRoute",
                "ec2:DeleteVpnGateway",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeAddresses",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeClassicLinkInstances",
                "ec2:DescribeCustomerGateways",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeEgressOnlyInternetGateways",
                "ec2:DescribeFlowLogs",
                "ec2:DescribeInstances",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeKeyPairs",
                "ec2:DescribeMovingAddresses",
                "ec2:DescribeNatGateways",
                "ec2:DescribeNetworkAcls",
                "ec2:DescribeNetworkInterfaceAttribute",
                "ec2:DescribeNetworkInterfacePermissions",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribePlacementGroups",
                "ec2:DescribePrefixLists",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSecurityGroupReferences",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeStaleSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeTags",
                "ec2:DescribeVpcAttribute",
                "ec2:DescribeVpcClassicLink",
                "ec2:DescribeVpcClassicLinkDnsSupport",
                "ec2:DescribeVpcEndpointConnectionNotifications",
                "ec2:DescribeVpcEndpointConnections",
                "ec2:DescribeVpcEndpoints",
                "ec2:DescribeVpcEndpointServiceConfigurations",
                "ec2:DescribeVpcEndpointServicePermissions",
                "ec2:DescribeVpcEndpointServices",
                "ec2:DescribeVpcPeeringConnections",
                "ec2:DescribeVpcs",
                "ec2:DescribeVpnConnections",
                "ec2:DescribeVpnGateways",
                "ec2:DetachInternetGateway",
                "ec2:DetachNetworkInterface",
                "ec2:DetachVpnGateway",
                "ec2:DisableVgwRoutePropagation",
                "ec2:DisableVpcClassicLinkDnsSupport",
                "ec2:DisassociateAddress",
                "ec2:DisassociateRouteTable",
                "ec2:DisassociateSubnetCidrBlock",
                "ec2:DisassociateVpcCidrBlock",
                "ec2:EnableVgwRoutePropagation",
                "ec2:EnableVpcClassicLinkDnsSupport",
                "ec2:Modify*",
                "ec2:MoveAddressToVpc",
                "ec2:RejectVpcEndpointConnections",
                "ec2:ReleaseAddress",
                "ec2:ReplaceNetworkAclAssociation",
                "ec2:ReplaceNetworkAclEntry",
                "ec2:ReplaceRoute",
                "ec2:ReplaceRouteTableAssociation",
                "ec2:ResetNetworkInterfaceAttribute",
                "ec2:RestoreAddressToClassic",
                "ec2:UnassignIpv6Addresses",
                "ec2:UnassignPrivateIpAddresses",
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            ],
            resources=[
              "*"
            ]
          ),
        ]
      )

      infrastructure_network_administrator_managed_policy=iam.ManagedPolicy(
        self,
        "TransitGatewayDirectConnectRoute53AdministratorManagedPolicy",
        managed_policy_name="TransitGatewayDirectConnectRoute53NetworkAdministrator",
        description="Transit Gateway Direct Connect Route 53 Network Administrator",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="TransitGatewayDirectConnectRoute53NetworkAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "ec2:AcceptTransitGatewayVpcAttachment",
                "ec2:AssociateTransitGatewayRouteTable",
                "ec2:CreateTransitGateway",
                "ec2:CreateTransitGatewayRoute",
                "ec2:CreateTransitGatewayRouteTable",
                "ec2:CreateTransitGatewayVpcAttachment",
                "ec2:DeleteTransitGateway",
                "ec2:DeleteTransitGatewayRoute",
                "ec2:DeleteTransitGatewayRouteTable",
                "ec2:DeleteTransitGatewayVpcAttachment",
                "ec2:DescribeTransitGatewayAttachments",
                "ec2:DescribeTransitGatewayRouteTables",
                "ec2:DescribeTransitGatewayVpcAttachments",
                "ec2:DescribeTransitGateways",
                "ec2:DisableTransitGatewayRouteTablePropagation",
                "ec2:DisassociateTransitGatewayRouteTable",
                "ec2:EnableTransitGatewayRouteTablePropagation",
                "ec2:ExportTransitGatewayRoutes",
                "ec2:GetTransitGatewayAttachmentPropagations",
                "ec2:GetTransitGatewayRouteTableAssociations",
                "ec2:GetTransitGatewayRouteTablePropagations",
                "ec2:ModifyTransitGatewayVpcAttachment",
                "ec2:RejectTransitGatewayVpcAttachment",
                "ec2:ReplaceTransitGatewayRoute",
                "ec2:SearchTransitGatewayRoutes"
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="TransitGatewayNetworkManagerAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "networkmanager:AssociateCustomerGateway",
                "networkmanager:AssociateLink",
                "networkmanager:CreateDevice",
                "networkmanager:CreateGlobalNetwork",
                "networkmanager:CreateLink",
                "networkmanager:CreateSite",
                "networkmanager:DeleteDevice",
                "networkmanager:DeleteGlobalNetwork",
                "networkmanager:DeleteLink",
                "networkmanager:DeleteSite",
                "networkmanager:DeregisterTransitGateway",
                "networkmanager:DescribeGlobalNetworks",
                "networkmanager:DisassociateCustomerGateway",
                "networkmanager:DisassociateLink",
                "networkmanager:GetCustomerGatewayAssociations",
                "networkmanager:GetDevices",
                "networkmanager:GetLinkAssociations",
                "networkmanager:GetLinks",
                "networkmanager:GetSites",
                "networkmanager:GetTransitGatewayRegistrations",
                "networkmanager:ListTagsForResource",
                "networkmanager:RegisterTransitGateway",
                "networkmanager:TagResource",
                "networkmanager:UntagResource",
                "networkmanager:UpdateDevice",
                "networkmanager:UpdateGlobalNetwork",
                "networkmanager:UpdateLink",
                "networkmanager:UpdateSite"
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="Route53Administrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "route53resolver:AssociateResolverEndpointIpAddress",
                "route53resolver:AssociateResolverRule",
                "route53resolver:CreateResolverEndpoint",
                "route53resolver:CreateResolverRule",
                "route53resolver:DeleteResolverEndpoint",
                "route53resolver:DeleteResolverRule",
                "route53resolver:DisassociateResolverEndpointIpAddress",
                "route53resolver:DisassociateResolverRule",
                "route53resolver:GetResolverEndpoint",
                "route53resolver:GetResolverRule",
                "route53resolver:GetResolverRuleAssociation",
                "route53resolver:GetResolverRulePolicy",
                "route53resolver:ListResolverEndpointIpAddresses",
                "route53resolver:ListResolverEndpoints",
                "route53resolver:ListResolverRuleAssociations",
                "route53resolver:ListResolverRules",
                "route53resolver:ListTagsForResource",
                "route53resolver:PutResolverRulePolicy",
                "route53resolver:TagResource",
                "route53resolver:UntagResource",
                "route53resolver:UpdateResolverEndpoint",
                "route53resolver:UpdateResolverRule"
            ],
            resources=[
                "arn:aws:route53resolver:*:*:resolver-endpoint/*",
                "arn:aws:route53resolver:*:*:resolver-rule/*"
            ]
          ),
          iam.PolicyStatement(
            sid="DirectConnectAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "directconnect:CreateDirectConnectGateway",
                "directconnect:DeleteDirectConnectGatewayAssociationProposal",
                "directconnect:DescribeLocations",
                "directconnect:DescribeVirtualGateways",
                "directconnect:UpdateDirectConnectGatewayAssociation"
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="DirectConnectAdministratorForResources",
            effect=iam.Effect.ALLOW,
            actions=[
                "directconnect:AcceptDirectConnectGatewayAssociationProposal",
                "directconnect:AllocateConnectionOnInterconnect",
                "directconnect:AllocateHostedConnection",
                "directconnect:AllocatePrivateVirtualInterface",
                "directconnect:AllocatePublicVirtualInterface",
                "directconnect:AllocateTransitVirtualInterface",
                "directconnect:AssociateConnectionWithLag",
                "directconnect:AssociateHostedConnection",
                "directconnect:AssociateVirtualInterface",
                "directconnect:ConfirmConnection",
                "directconnect:ConfirmPrivateVirtualInterface",
                "directconnect:ConfirmPublicVirtualInterface",
                "directconnect:ConfirmTransitVirtualInterface",
                "directconnect:Create*",
                "directconnect:DeleteBGPPeer",
                "directconnect:DeleteConnection",
                "directconnect:DeleteDirectConnectGateway",
                "directconnect:DeleteDirectConnectGatewayAssociation",
                "directconnect:DeleteInterconnect",
                "directconnect:DeleteLag",
                "directconnect:DeleteVirtualInterface",
                "directconnect:Describe*",
                "directconnect:DisassociateConnectionFromLag",
                "directconnect:TagResource",
                "directconnect:UntagResource",
                "directconnect:UpdateLag",
                "directconnect:UpdateVirtualInterfaceAttributes"
            ],
            resources=[
                "arn:aws:directconnect:*:*:dxvif/*",
                "arn:aws:directconnect:*:*:dxlag/*",
                "arn:aws:directconnect:*:*:dxcon/*",
                "arn:aws:directconnect::*:dx-gateway/*"
            ]
          ),
        ]
      )

      autoscaling_read_managed_policy=iam.ManagedPolicy(
        self,
        "AutoScalingRead",
        managed_policy_name="AutoScalingReadOnly",
        description="Auto Scaling Read",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="AutoScalingRead",
            effect=iam.Effect.ALLOW,
            actions=[
                "autoscaling:DescribeAutoScalingNotificationTypes",
                "autoscaling:DescribeLifecycleHookTypes",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeTerminationPolicyTypes",
                "autoscaling:DescribeScalingProcessTypes",
                "autoscaling:DescribePolicies",
                "autoscaling:DescribeTags",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeMetricCollectionTypes",
                "autoscaling:DescribeLoadBalancers",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAdjustmentTypes",
                "autoscaling:DescribeScalingActivities",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAccountLimits",
                "autoscaling:DescribeScheduledActions",
                "autoscaling:DescribeLoadBalancerTargetGroups",
                "autoscaling:DescribeNotificationConfigurations"
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="AutoScalingAdmin",
            effect=iam.Effect.ALLOW,
            actions=[
                "autoscaling:AttachInstances",
                "autoscaling:AttachLoadBalancerTargetGroups",
                "autoscaling:AttachLoadBalancers",
                "autoscaling:BatchDeleteScheduledAction",
                "autoscaling:BatchPutScheduledUpdateGroupAction",
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:CreateLaunchConfiguration",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:DeleteAutoScalingGroup",
                "autoscaling:DeleteLaunchConfiguration",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DeleteNotificationConfiguration",
                "autoscaling:DeletePolicy",
                "autoscaling:DeleteScheduledAction",
                "autoscaling:DeleteTags",
                "autoscaling:DetachInstances",
                "autoscaling:DetachLoadBalancerTargetGroups",
                "autoscaling:DetachLoadBalancers",
                "autoscaling:DisableMetricsCollection",
                "autoscaling:EnableMetricsCollection",
                "autoscaling:EnterStandby",
                "autoscaling:ExecutePolicy",
                "autoscaling:ExitStandby",
                "autoscaling:PutLifecycleHook",
                "autoscaling:PutNotificationConfiguration",
                "autoscaling:PutScalingPolicy",
                "autoscaling:PutScheduledUpdateGroupAction",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "autoscaling:ResumeProcesses",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SetInstanceHealth",
                "autoscaling:SetInstanceProtection",
                "autoscaling:SuspendProcesses",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:UpdateAutoScalingGroup",
            ],
            resources=[
                "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/*",
                "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/*"
            ]
          )
        ]
      )

      cloudformation_administrator_managed_policy=iam.ManagedPolicy(
        self,
        "CloudFormationAdministrator",
        managed_policy_name="CloudFormationAdministrator",
        description="CloudFormation Administrator",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="CloudFormationAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "cloudformation:CancelUpdateStack",
                "cloudformation:ContinueUpdateRollback",
                "cloudformation:CreateChangeSet",
                "cloudformation:CreateStack",
                "cloudformation:CreateStackInstances",
                "cloudformation:DeleteChangeSet",
                "cloudformation:DeleteStack",
                "cloudformation:DeleteStackInstances",
                "cloudformation:DeleteStackSet",
                "cloudformation:DescribeChangeSet",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackInstance",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResourceDrifts",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStackSet",
                "cloudformation:DescribeStackSetOperation",
                "cloudformation:DescribeStacks",
                "cloudformation:DetectStackDrift",
                "cloudformation:DetectStackResourceDrift",
                "cloudformation:DetectStackSetDrift",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:GetStackPolicy",
                "cloudformation:GetTemplate",
                "cloudformation:GetTemplateSummary",
                "cloudformation:ListChangeSets",
                "cloudformation:ListStackInstances",
                "cloudformation:ListStackResources",
                "cloudformation:ListStackSetOperationResults",
                "cloudformation:ListStackSetOperations",
                "cloudformation:ListStackSets",
                "cloudformation:SetStackPolicy",
                "cloudformation:SignalResource",
                "cloudformation:StopStackSetOperation",
                "cloudformation:TagResource",
                "cloudformation:UntagResource",
                "cloudformation:UpdateStack",
                "cloudformation:UpdateStackInstances",
                "cloudformation:UpdateStackSet",
                "cloudformation:UpdateTerminationProtection"
            ],
            resources=[
                "arn:aws:cloudformation:*:*:stack/*/*",
                "arn:aws:cloudformation:*:*:stackset/*:*"
            ]
          ),
          iam.PolicyStatement(
            sid="CloudFormationAdminWrite",
            effect=iam.Effect.ALLOW,
            actions=[
                "cloudformation:CreateUploadBucket",
                "cloudformation:CreateStackSet",
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="CloudFormationRead",
            effect=iam.Effect.ALLOW,
            actions=[
                "cloudformation:DescribeAccountLimits",
                "cloudformation:DescribeStackDriftDetectionStatus",
                "cloudformation:EstimateTemplateCost",
                "cloudformation:ListExports",
                "cloudformation:ListImports",
                "cloudformation:ListStacks",
                "cloudformation:ValidateTemplate"
            ],
            resources=[
              "*"
            ]
          ),
        ]
      )

      elasticloadbalancing_administrator_managed_policy=iam.ManagedPolicy(
        self,
        "ElasticLoadBalancingAdministrator",
        managed_policy_name="ElasticLoadBalancingAdministrator",
        description="Elastic Load Balancing Administrator",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="ElasticLoadBalancingRead",
            effect=iam.Effect.ALLOW,
            actions=[
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeSSLPolicies",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeTargetGroupAttributes",
                "elasticloadbalancing:DescribeListeners",
                "elasticloadbalancing:DescribeTags",
                "elasticloadbalancing:DescribeAccountLimits",
                "elasticloadbalancing:DescribeTargetHealth",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:DescribeListenerCertificates",
                "elasticloadbalancing:DescribeRules"
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="ElasticLoadBalancingAdministratorNoResource",
            effect=iam.Effect.ALLOW,
            actions=[
                "elasticloadbalancing:SetWebAcl",
            ],
            resources=[
              "*"
            ]
          ),
          iam.PolicyStatement(
            sid="ElasticLoadBalancingAdministrator",
            effect=iam.Effect.ALLOW,
            actions=[
                "elasticloadbalancing:AddListenerCertificates",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:CreateRule",
                "elasticloadbalancing:CreateTargetGroup",
                "elasticloadbalancing:DeleteListener",
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:DeleteRule",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:ModifyRule",
                "elasticloadbalancing:ModifyTargetGroup",
                "elasticloadbalancing:ModifyTargetGroupAttributes",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:RemoveListenerCertificates",
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:SetIpAddressType",
                "elasticloadbalancing:SetRulePriorities",
                "elasticloadbalancing:SetSecurityGroups",
                "elasticloadbalancing:SetSubnets"
            ],
            resources=[
                "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*/*"
            ]
          )  
        ]
      )

      network_administrator_sandbox=iam.Role(
        self,
        "NetworkAdministratorRole",
        role_name="NetworkAdministrator",
        description="Network Administrator",
        max_session_duration=core.Duration.hours(max_session_duration),
        path=iam_path,
        assumed_by=iam.FederatedPrincipal(
          f"arn:aws:iam::{core.Aws.ACCOUNT_ID}:saml-provider/{identity_provider_name}",
          conditions={
            "StringEquals": {
              "SAML:aud": "https://signin.aws.amazon.com/saml"
            }
          },
          assume_role_action="sts:AssumeRoleWithSAML"
        )
      )

      deny_non_network_perimter=iam.ManagedPolicy(
        self,
        "DenyNonNetworkPerimeter",
        managed_policy_name="DenyNonNetworkPerimeter",
        description="Deny Non Network Perimeter",
        path=iam_path,
        statements=[
          iam.PolicyStatement(
            sid="DenyNonNetworkPerimeter",
            effect=iam.Effect.DENY,
            actions=[
              "*"
            ],
            resources=[
              "*"
            ],
            conditions={
              "NotIpAddress": {
                "aws:SourceIp": trusted_cidrs
              }
            }
          )
        ]
      )

      network_administrator_sandbox.add_managed_policy(elasticloadbalancing_administrator_managed_policy)
      network_administrator_sandbox.add_managed_policy(ec2_network_administrator_managed_policy)
      network_administrator_sandbox.add_managed_policy(infrastructure_network_administrator_managed_policy)
      network_administrator_sandbox.add_managed_policy(autoscaling_read_managed_policy)
      network_administrator_sandbox.add_managed_policy(cloudformation_administrator_managed_policy)

      #network_administrator_sandbox.grant_pass_role(network_administrator_sandbox)

      network_administrator_sandbox.add_managed_policy(deny_non_network_perimter)
      core.Tag.add(network_administrator_sandbox,"Name","NetworkAdministrator")


